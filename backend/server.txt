const express = require('express');
const mysql = require('mysql2');
const cors = require('cors');
const bodyParser = require('body-parser');
const multer = require('multer');
const path = require('path');

const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use(express.static('uploads'));

const db =require('./db');
// Set up multer for image uploads
const storage = multer.diskStorage({
    destination: './uploads/',
    filename: (req, file, cb) => {
        cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage });

// Create a product
app.post('/add', upload.single('image'), (req, res) => {
    const { name, type, category, price, stock } = req.body;
    const image = req.file ? req.file.filename : '';
    const sql = "INSERT INTO products (name, type, category, price, stock, image) VALUES (?, ?, ?, ?, ?, ?)";
    db.query(sql, [name, type, category, price, stock, image], (err, result) => {
        if (err) throw err;
        res.send({ message: "Product added successfully", id: result.insertId });
    });
});

// Read all products
app.get('/products', (req, res) => {
    const sql = "SELECT * FROM products";
    db.query(sql, (err, results) => {
        if (err) throw err;
        res.json(results);
    });
});

// Update a product
app.put('/update/:id', upload.single('image'), (req, res) => {
    const { name, type, category, price, stock } = req.body;
    let sql = "UPDATE products SET name=?, type=?, category=?, price=?, stock=?";
    const values = [name, type, category, price, stock];

    if (req.file) {
        sql += ", image=?";
        values.push(req.file.filename);
    }
    sql += " WHERE id=?";
    values.push(req.params.id);

    db.query(sql, values, (err, result) => {
        if (err) throw err;
        res.send({ message: "Product updated successfully" });
    });
});

// Delete a product
app.delete('/delete/:id', (req, res) => {
    const sql = "DELETE FROM products WHERE id=?";
    db.query(sql, [req.params.id], (err, result) => {
        if (err) throw err;
        res.send({ message: "Product deleted successfully" });
    });
});

app.listen(5000, () => console.log("Server running on port 5000"));












const express = require('express');
const mysql = require('mysql2');
const cors = require('cors');
const multer = require('multer');
const path = require('path');

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use('/uploads', express.static('uploads')); // Serve images

// Configure Multer for file uploads
const storage = multer.diskStorage({
    destination: './uploads/',
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage });

// MySQL Database Connection
const db = require('./db');


// 🚀 **GET: Fetch All Products**
app.get('/products', (req, res) => {
    const sql = "SELECT * FROM products";
    db.query(sql, (err, results) => {
        if (err) return res.status(500).json({ error: err });
        res.json(results);
    });
});

// 🚀 **GET: Fetch a Single Product by ID**
app.get('/product/:id', (req, res) => {
    const sql = "SELECT * FROM products WHERE id = ?";
    db.query(sql, [req.params.id], (err, result) => {
        if (err) return res.status(500).json({ error: err });
        if (result.length === 0) return res.status(404).json({ message: "Product not found" });
        res.json(result[0]);
    });
});

// 🚀 **POST: Add New Product**
app.post('/add', upload.single('image'), (req, res) => {
    const { name, type, category, price, stock } = req.body;
    const image = req.file ? req.file.filename : 'default.jpg';

    const sql = "INSERT INTO products (name, type, category, price, stock, image) VALUES (?, ?, ?, ?, ?, ?)";
    const values = [name, type, category, price, stock, image];

    db.query(sql, values, (err, result) => {
        if (err) return res.status(500).json({ error: err });
        res.json({ message: "Product added successfully", productId: result.insertId });
    });
});

// 🚀 **PUT: Update Product**
app.put('/update/:id', upload.single('image'), (req, res) => {
    const { name, type, category, price, stock } = req.body;
    let sql = "UPDATE products SET name=?, type=?, category=?, price=?, stock=?";
    const values = [name, type, category, price, stock];

    if (req.file) {
        sql += ", image=?";
        values.push(req.file.filename);
    }
    sql += " WHERE id=?";
    values.push(req.params.id);

    db.query(sql, values, (err, result) => {
        if (err) return res.status(500).json({ error: err });
        res.json({ message: "Product updated successfully" });
    });
});

// 🚀 **DELETE: Remove Product**
app.delete('/delete/:id', (req, res) => {
    const sql = "DELETE FROM products WHERE id = ?";
    db.query(sql, [req.params.id], (err, result) => {
        if (err) return res.status(500).json({ error: err });
        res.json({ message: "Product deleted successfully" });
    });
});

// Start the server
const PORT = 5000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});



const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const db = require('./db');  // Database connection file
const nodemailer = require('nodemailer');
const multer=require('multer');
const path = require('path');

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use('/uploads', express.static('uploads')); // Serve images

const otpStorage = {};  // Temporary storage for OTPs

// --------------------------
// 🚀 1️⃣ User Registration
// --------------------------
app.post("/register", async (req, res) => {
  const { firstname, lastname, email, password } = req.body;

  if (!firstname || !lastname || !email || !password) {
      return res.status(400).json({ message: "All fields are required" });
  }

  db.query("SELECT * FROM users WHERE email = ?", [email], async (err, results) => {
      if (err) return res.status(500).json({ message: "Database error" });

      if (results.length > 0) {
          return res.status(400).json({ message: "User already exists" });
      }

      try {
          const hashedPassword = await bcrypt.hash(password, 10);
          db.query(
              "INSERT INTO users (email, password, firstname, lastname) VALUES (?, ?, ?, ?)",
              [email, hashedPassword, firstname, lastname],
              (err, result) => {
                  if (err) return res.status(500).json({ message: "Registration error" });

                  res.json({ success: true, message: "User registered successfully" });
              }
          );
      } catch (error) {
          res.status(500).json({ message: "Error hashing password" });
      }
  });
});
// --------------------------
// 🚀 2️⃣ User Login
// --------------------------
app.post('/login', async (req, res) => {
    const { email, password } = req.body;
  
    if (!email || !password) {
        return res.status(400).json({ message: 'All fields are required' });
    }

    db.query("SELECT * FROM users WHERE email = ?", [email], async (err, results) => {
        if (err || results.length === 0) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        const user = results[0];
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        const token = jwt.sign(
            { userId: user.id, email: user.email },
            process.env.JWT_SECRET || 'SECRET_KEY',
            { expiresIn: '1h' }
        );

        res.json({ success: true, token, redirect: '/home.html' });
    });
});

// --------------------------
// Admin Login
// --------------------------
app.post('/admin/login', async (req, res) => {
    const { email, password } = req.body;
  
    if (!email || !password) {
        return res.status(400).json({ message: 'All fields are required' });
    }

    db.query("SELECT * FROM admin WHERE email = ?", [email], async (err, results) => {
        if (err || results.length === 0) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        const user = results[0];
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        const token = jwt.sign(
            { userId: user.id, email: user.email },
            process.env.JWT_SECRET || 'SECRET_KEY',
            { expiresIn: '1h' }
        );

        res.json({ success: true, token, redirect: '/home.html' });
    });
});

// --------------------------
// 🚀 3️⃣ Forgot Password (Send OTP)
// --------------------------
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER, // Your Gmail
        pass: process.env.EMAIL_PASS  // Your Gmail App Password
    }
});

app.post('/forgot-password', async (req, res) => {
  const { email } = req.body;

  if (!email) return res.status(400).json({ message: 'Email is required' });

  // Generate OTP
  const otp = Math.floor(100000 + Math.random() * 900000);
  otpStorage[email] = otp; // Save OTP temporarily

  const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Password Reset OTP",
      text: `Your OTP is ${otp}. It is valid for 10 minutes.`
  };

  try {
      await transporter.sendMail(mailOptions);
      console.log(`✅ OTP sent to ${email}: ${otp}`);
      res.json({ success: true, message: 'OTP sent to your email' });
  } catch (error) {
      console.error("❌ Error sending OTP:", error);
      res.status(500).json({ message: 'Failed to send OTP' });
  }
});
// --------------------------
// 🚀 4️⃣ Verify OTP
// --------------------------

// ✅ API to Verify OTP
app.post('/verify-otp', (req, res) => {
    const { email, otp } = req.body;

    if (!email || !otp) {
        return res.status(400).json({ message: 'Email and OTP are required' });
    }

    console.log(`🔍 Checking OTP for ${email}: Sent OTP = ${otpStorage[email]}, User Entered = ${otp}`);

    if (otpStorage[email] && otpStorage[email] == otp) {
        delete otpStorage[email];  // ✅ Remove OTP after successful verification
        res.json({ success: true, message: 'OTP Verified' });
    } else {
        res.status(400).json({ message: 'Invalid OTP' });
    }
});


// --------------------------
// 🚀 5️⃣ Reset Password
// --------------------------
app.post('/reset-password', async (req, res) => {
    const { email, newPassword } = req.body;

    if (!email || !newPassword) {
        return res.status(400).json({ message: 'All fields are required' });
    }

    try {
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        db.query("UPDATE users SET password = ? WHERE email = ?", [hashedPassword, email], (err, result) => {
            if (err) return res.status(500).json({ message: 'Server error' });

            res.json({ success: true, message: 'Password updated successfully' });
        });
    } catch (error) {
        res.status(500).json({ message: 'Error hashing password' });
    }
});



//-------
// admin forgot
// ------

app.post('/admin/forgot-password', async (req, res) => {
  const { email } = req.body;

  if (!email) return res.status(400).json({ message: 'Email is required' });

  // Generate OTP
  const otp = Math.floor(100000 + Math.random() * 900000);
  otpStorage[email] = otp; // Save OTP temporarily

  const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Password Reset OTP",
      text: `Your OTP is ${otp}. It is valid for 10 minutes.`
  };

  try {
      await transporter.sendMail(mailOptions);
      console.log(`✅ OTP sent to ${email}: ${otp}`);
      res.json({ success: true, message: 'OTP sent to your email' });
  } catch (error) {
      console.error("❌ Error sending OTP:", error);
      res.status(500).json({ message: 'Failed to send OTP' });
  }
});
// --------------------------
// 🚀 4️⃣ Verify OTP
// --------------------------

// ✅ API to Verify OTP
app.post('/admin/verify-otp', (req, res) => {
    const { email, otp } = req.body;

    if (!email || !otp) {
        return res.status(400).json({ message: 'Email and OTP are required' });
    }

    console.log(`🔍 Checking OTP for ${email}: Sent OTP = ${otpStorage[email]}, User Entered = ${otp}`);

    if (otpStorage[email] && otpStorage[email] == otp) {
        delete otpStorage[email];  // ✅ Remove OTP after successful verification
        res.json({ success: true, message: 'OTP Verified' });
    } else {
        res.status(400).json({ message: 'Invalid OTP' });
    }
});


// --------------------------
// 🚀 5️⃣ Reset Password
// --------------------------
app.post('/admin/reset-password', async (req, res) => {
    const { email, newPassword } = req.body;

    if (!email || !newPassword) {
        return res.status(400).json({ message: 'All fields are required' });
    }

    try {
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        db.query("UPDATE admin SET password = ? WHERE email = ?", [hashedPassword, email], (err, result) => {
            if (err) return res.status(500).json({ message: 'Server error' });

            res.json({ success: true, message: 'Password updated successfully' });
        });
    } catch (error) {
        res.status(500).json({ message: 'Error hashing password' });
    }
});


// --------------------------
// 🚀 Start Server
// --------------------------
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
